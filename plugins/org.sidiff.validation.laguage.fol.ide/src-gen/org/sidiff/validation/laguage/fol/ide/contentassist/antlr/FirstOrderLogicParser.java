/*
 * generated by Xtext 2.29.0
 */
package org.sidiff.validation.laguage.fol.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.sidiff.validation.laguage.fol.ide.contentassist.antlr.internal.InternalFirstOrderLogicParser;
import org.sidiff.validation.laguage.fol.services.FirstOrderLogicGrammarAccess;

public class FirstOrderLogicParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(FirstOrderLogicGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, FirstOrderLogicGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getPredicateAccess().getAlternatives(), "rule__Predicate__Alternatives");
			builder.put(grammarAccess.getInequalityAccess().getAlternatives(), "rule__Inequality__Alternatives");
			builder.put(grammarAccess.getQuantifierAccess().getAlternatives(), "rule__Quantifier__Alternatives");
			builder.put(grammarAccess.getBooleanExpressionAccess().getAlternatives(), "rule__BooleanExpression__Alternatives");
			builder.put(grammarAccess.getTermAccess().getAlternatives(), "rule__Term__Alternatives");
			builder.put(grammarAccess.getClassifierAccess().getAlternatives(), "rule__Classifier__Alternatives");
			builder.put(grammarAccess.getDataTypeAccess().getAlternatives(), "rule__DataType__Alternatives");
			builder.put(grammarAccess.getConstantAccess().getAlternatives(), "rule__Constant__Alternatives");
			builder.put(grammarAccess.getConstraintLibraryAccess().getGroup(), "rule__ConstraintLibrary__Group__0");
			builder.put(grammarAccess.getDomainAccess().getGroup(), "rule__Domain__Group__0");
			builder.put(grammarAccess.getConstraintAccess().getGroup(), "rule__Constraint__Group__0");
			builder.put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
			builder.put(grammarAccess.getIffAccess().getGroup(), "rule__Iff__Group__0");
			builder.put(grammarAccess.getIffAccess().getGroup_1(), "rule__Iff__Group_1__0");
			builder.put(grammarAccess.getIfAccess().getGroup(), "rule__If__Group__0");
			builder.put(grammarAccess.getIfAccess().getGroup_1(), "rule__If__Group_1__0");
			builder.put(grammarAccess.getXorAccess().getGroup(), "rule__Xor__Group__0");
			builder.put(grammarAccess.getXorAccess().getGroup_1(), "rule__Xor__Group_1__0");
			builder.put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
			builder.put(grammarAccess.getOrAccess().getGroup_1(), "rule__Or__Group_1__0");
			builder.put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
			builder.put(grammarAccess.getAndAccess().getGroup_1(), "rule__And__Group_1__0");
			builder.put(grammarAccess.getNotAccess().getGroup(), "rule__Not__Group__0");
			builder.put(grammarAccess.getEqualsAccess().getGroup(), "rule__Equals__Group__0");
			builder.put(grammarAccess.getGreaterAccess().getGroup(), "rule__Greater__Group__0");
			builder.put(grammarAccess.getGreaterEqualAccess().getGroup(), "rule__GreaterEqual__Group__0");
			builder.put(grammarAccess.getSmallerAccess().getGroup(), "rule__Smaller__Group__0");
			builder.put(grammarAccess.getSmallerEqualAccess().getGroup(), "rule__SmallerEqual__Group__0");
			builder.put(grammarAccess.getIsEmptyAccess().getGroup(), "rule__IsEmpty__Group__0");
			builder.put(grammarAccess.getIsInstanceOfAccess().getGroup(), "rule__IsInstanceOf__Group__0");
			builder.put(grammarAccess.getIsValueLiteralOfAccess().getGroup(), "rule__IsValueLiteralOf__Group__0");
			builder.put(grammarAccess.getForAllAccess().getGroup(), "rule__ForAll__Group__0");
			builder.put(grammarAccess.getExistsAccess().getGroup(), "rule__Exists__Group__0");
			builder.put(grammarAccess.getBooleanExpressionAccess().getGroup_0(), "rule__BooleanExpression__Group_0__0");
			builder.put(grammarAccess.getVariableRefAccess().getGroup(), "rule__VariableRef__Group__0");
			builder.put(grammarAccess.getGetAccess().getGroup(), "rule__Get__Group__0");
			builder.put(grammarAccess.getGetAccess().getGroup_1(), "rule__Get__Group_1__0");
			builder.put(grammarAccess.getGetContainerAccess().getGroup(), "rule__GetContainer__Group__0");
			builder.put(grammarAccess.getGetContainmentsAccess().getGroup(), "rule__GetContainments__Group__0");
			builder.put(grammarAccess.getGetClosureAccess().getGroup(), "rule__GetClosure__Group__0");
			builder.put(grammarAccess.getSizeAccess().getGroup(), "rule__Size__Group__0");
			builder.put(grammarAccess.getIndexOfAccess().getGroup(), "rule__IndexOf__Group__0");
			builder.put(grammarAccess.getConcatenateAccess().getGroup(), "rule__Concatenate__Group__0");
			builder.put(grammarAccess.getCapitalizeAccess().getGroup(), "rule__Capitalize__Group__0");
			builder.put(grammarAccess.getSelectAccess().getGroup(), "rule__Select__Group__0");
			builder.put(grammarAccess.getAsClassifierAccess().getGroup(), "rule__AsClassifier__Group__0");
			builder.put(grammarAccess.getAsDataTypeAccess().getGroup(), "rule__AsDataType__Group__0");
			builder.put(grammarAccess.getConstraintLibraryAccess().getDomainsAssignment_0(), "rule__ConstraintLibrary__DomainsAssignment_0");
			builder.put(grammarAccess.getConstraintLibraryAccess().getConstraintsAssignment_1(), "rule__ConstraintLibrary__ConstraintsAssignment_1");
			builder.put(grammarAccess.getDomainAccess().getDomainAssignment_1(), "rule__Domain__DomainAssignment_1");
			builder.put(grammarAccess.getConstraintAccess().getNameAssignment_1(), "rule__Constraint__NameAssignment_1");
			builder.put(grammarAccess.getConstraintAccess().getMessageAssignment_3(), "rule__Constraint__MessageAssignment_3");
			builder.put(grammarAccess.getConstraintAccess().getVariableAssignment_5(), "rule__Constraint__VariableAssignment_5");
			builder.put(grammarAccess.getConstraintAccess().getFormulaAssignment_7(), "rule__Constraint__FormulaAssignment_7");
			builder.put(grammarAccess.getVariableAccess().getTypeAssignment_0(), "rule__Variable__TypeAssignment_0");
			builder.put(grammarAccess.getVariableAccess().getNameAssignment_1(), "rule__Variable__NameAssignment_1");
			builder.put(grammarAccess.getIffAccess().getRightAssignment_1_2(), "rule__Iff__RightAssignment_1_2");
			builder.put(grammarAccess.getIfAccess().getRightAssignment_1_2(), "rule__If__RightAssignment_1_2");
			builder.put(grammarAccess.getXorAccess().getRightAssignment_1_2(), "rule__Xor__RightAssignment_1_2");
			builder.put(grammarAccess.getOrAccess().getRightAssignment_1_2(), "rule__Or__RightAssignment_1_2");
			builder.put(grammarAccess.getAndAccess().getRightAssignment_1_2(), "rule__And__RightAssignment_1_2");
			builder.put(grammarAccess.getNotAccess().getNotAssignment_3(), "rule__Not__NotAssignment_3");
			builder.put(grammarAccess.getEqualsAccess().getLeftAssignment_2(), "rule__Equals__LeftAssignment_2");
			builder.put(grammarAccess.getEqualsAccess().getRightAssignment_4(), "rule__Equals__RightAssignment_4");
			builder.put(grammarAccess.getGreaterAccess().getLeftAssignment_2(), "rule__Greater__LeftAssignment_2");
			builder.put(grammarAccess.getGreaterAccess().getRightAssignment_4(), "rule__Greater__RightAssignment_4");
			builder.put(grammarAccess.getGreaterEqualAccess().getLeftAssignment_2(), "rule__GreaterEqual__LeftAssignment_2");
			builder.put(grammarAccess.getGreaterEqualAccess().getRightAssignment_4(), "rule__GreaterEqual__RightAssignment_4");
			builder.put(grammarAccess.getSmallerAccess().getLeftAssignment_2(), "rule__Smaller__LeftAssignment_2");
			builder.put(grammarAccess.getSmallerAccess().getRightAssignment_4(), "rule__Smaller__RightAssignment_4");
			builder.put(grammarAccess.getSmallerEqualAccess().getLeftAssignment_2(), "rule__SmallerEqual__LeftAssignment_2");
			builder.put(grammarAccess.getSmallerEqualAccess().getRightAssignment_4(), "rule__SmallerEqual__RightAssignment_4");
			builder.put(grammarAccess.getIsEmptyAccess().getTermAssignment_2(), "rule__IsEmpty__TermAssignment_2");
			builder.put(grammarAccess.getIsInstanceOfAccess().getTermAssignment_2(), "rule__IsInstanceOf__TermAssignment_2");
			builder.put(grammarAccess.getIsInstanceOfAccess().getTypeAssignment_4(), "rule__IsInstanceOf__TypeAssignment_4");
			builder.put(grammarAccess.getIsValueLiteralOfAccess().getTermAssignment_2(), "rule__IsValueLiteralOf__TermAssignment_2");
			builder.put(grammarAccess.getIsValueLiteralOfAccess().getTypeAssignment_4(), "rule__IsValueLiteralOf__TypeAssignment_4");
			builder.put(grammarAccess.getForAllAccess().getNameAssignment_3(), "rule__ForAll__NameAssignment_3");
			builder.put(grammarAccess.getForAllAccess().getIterationAssignment_5(), "rule__ForAll__IterationAssignment_5");
			builder.put(grammarAccess.getForAllAccess().getFormulaAssignment_7(), "rule__ForAll__FormulaAssignment_7");
			builder.put(grammarAccess.getExistsAccess().getNameAssignment_3(), "rule__Exists__NameAssignment_3");
			builder.put(grammarAccess.getExistsAccess().getIterationAssignment_5(), "rule__Exists__IterationAssignment_5");
			builder.put(grammarAccess.getExistsAccess().getFormulaAssignment_7(), "rule__Exists__FormulaAssignment_7");
			builder.put(grammarAccess.getVariableRefAccess().getNameAssignment_1(), "rule__VariableRef__NameAssignment_1");
			builder.put(grammarAccess.getVariableRefAccess().getGetAssignment_2(), "rule__VariableRef__GetAssignment_2");
			builder.put(grammarAccess.getGetAccess().getTypeAssignment_1_0(), "rule__Get__TypeAssignment_1_0");
			builder.put(grammarAccess.getGetAccess().getNameAssignment_2(), "rule__Get__NameAssignment_2");
			builder.put(grammarAccess.getGetAccess().getNextAssignment_3(), "rule__Get__NextAssignment_3");
			builder.put(grammarAccess.getGetContainerAccess().getElementAssignment_2(), "rule__GetContainer__ElementAssignment_2");
			builder.put(grammarAccess.getGetContainmentsAccess().getElementAssignment_2(), "rule__GetContainments__ElementAssignment_2");
			builder.put(grammarAccess.getGetClosureAccess().getElementAssignment_2(), "rule__GetClosure__ElementAssignment_2");
			builder.put(grammarAccess.getGetClosureAccess().getFeatureAssignment_4(), "rule__GetClosure__FeatureAssignment_4");
			builder.put(grammarAccess.getSizeAccess().getElementsAssignment_2(), "rule__Size__ElementsAssignment_2");
			builder.put(grammarAccess.getIndexOfAccess().getContainerAssignment_2(), "rule__IndexOf__ContainerAssignment_2");
			builder.put(grammarAccess.getIndexOfAccess().getFeatureAssignment_4(), "rule__IndexOf__FeatureAssignment_4");
			builder.put(grammarAccess.getIndexOfAccess().getElementAssignment_6(), "rule__IndexOf__ElementAssignment_6");
			builder.put(grammarAccess.getConcatenateAccess().getLeftAssignment_2(), "rule__Concatenate__LeftAssignment_2");
			builder.put(grammarAccess.getConcatenateAccess().getRightAssignment_4(), "rule__Concatenate__RightAssignment_4");
			builder.put(grammarAccess.getCapitalizeAccess().getStringAssignment_2(), "rule__Capitalize__StringAssignment_2");
			builder.put(grammarAccess.getSelectAccess().getNameAssignment_3(), "rule__Select__NameAssignment_3");
			builder.put(grammarAccess.getSelectAccess().getIterationAssignment_5(), "rule__Select__IterationAssignment_5");
			builder.put(grammarAccess.getSelectAccess().getFormulaAssignment_7(), "rule__Select__FormulaAssignment_7");
			builder.put(grammarAccess.getFeatureConstantAccess().getConstantAssignment(), "rule__FeatureConstant__ConstantAssignment");
			builder.put(grammarAccess.getClassifierConstantAccess().getConstantAssignment(), "rule__ClassifierConstant__ConstantAssignment");
			builder.put(grammarAccess.getAsClassifierAccess().getTermAssignment_2(), "rule__AsClassifier__TermAssignment_2");
			builder.put(grammarAccess.getDataTypeConstantAccess().getConstantAssignment(), "rule__DataTypeConstant__ConstantAssignment");
			builder.put(grammarAccess.getAsDataTypeAccess().getTermAssignment_2(), "rule__AsDataType__TermAssignment_2");
			builder.put(grammarAccess.getIntConstantAccess().getValueAssignment(), "rule__IntConstant__ValueAssignment");
			builder.put(grammarAccess.getStringConstantAccess().getValueAssignment(), "rule__StringConstant__ValueAssignment");
			builder.put(grammarAccess.getBoolConstantAccess().getValueAssignment(), "rule__BoolConstant__ValueAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private FirstOrderLogicGrammarAccess grammarAccess;

	@Override
	protected InternalFirstOrderLogicParser createParser() {
		InternalFirstOrderLogicParser result = new InternalFirstOrderLogicParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public FirstOrderLogicGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(FirstOrderLogicGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
