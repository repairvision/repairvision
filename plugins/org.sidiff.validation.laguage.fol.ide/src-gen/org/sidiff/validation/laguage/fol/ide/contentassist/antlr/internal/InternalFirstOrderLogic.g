/*
 * generated by Xtext 2.29.0
 */
grammar InternalFirstOrderLogic;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.sidiff.validation.laguage.fol.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.sidiff.validation.laguage.fol.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.sidiff.validation.laguage.fol.services.FirstOrderLogicGrammarAccess;

}
@parser::members {
	private FirstOrderLogicGrammarAccess grammarAccess;

	public void setGrammarAccess(FirstOrderLogicGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleConstraintLibrary
entryRuleConstraintLibrary
:
{ before(grammarAccess.getConstraintLibraryRule()); }
	 ruleConstraintLibrary
{ after(grammarAccess.getConstraintLibraryRule()); } 
	 EOF 
;

// Rule ConstraintLibrary
ruleConstraintLibrary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstraintLibraryAccess().getGroup()); }
		(rule__ConstraintLibrary__Group__0)
		{ after(grammarAccess.getConstraintLibraryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDomain
entryRuleDomain
:
{ before(grammarAccess.getDomainRule()); }
	 ruleDomain
{ after(grammarAccess.getDomainRule()); } 
	 EOF 
;

// Rule Domain
ruleDomain 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDomainAccess().getGroup()); }
		(rule__Domain__Group__0)
		{ after(grammarAccess.getDomainAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstraint
entryRuleConstraint
:
{ before(grammarAccess.getConstraintRule()); }
	 ruleConstraint
{ after(grammarAccess.getConstraintRule()); } 
	 EOF 
;

// Rule Constraint
ruleConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstraintAccess().getGroup()); }
		(rule__Constraint__Group__0)
		{ after(grammarAccess.getConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getGroup()); }
		(rule__Variable__Group__0)
		{ after(grammarAccess.getVariableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFormula
entryRuleFormula
:
{ before(grammarAccess.getFormulaRule()); }
	 ruleFormula
{ after(grammarAccess.getFormulaRule()); } 
	 EOF 
;

// Rule Formula
ruleFormula 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFormulaAccess().getBinaryFormulaParserRuleCall()); }
		ruleBinaryFormula
		{ after(grammarAccess.getFormulaAccess().getBinaryFormulaParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBinaryFormula
entryRuleBinaryFormula
:
{ before(grammarAccess.getBinaryFormulaRule()); }
	 ruleBinaryFormula
{ after(grammarAccess.getBinaryFormulaRule()); } 
	 EOF 
;

// Rule BinaryFormula
ruleBinaryFormula 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBinaryFormulaAccess().getIffParserRuleCall()); }
		ruleIff
		{ after(grammarAccess.getBinaryFormulaAccess().getIffParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIff
entryRuleIff
:
{ before(grammarAccess.getIffRule()); }
	 ruleIff
{ after(grammarAccess.getIffRule()); } 
	 EOF 
;

// Rule Iff
ruleIff 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIffAccess().getGroup()); }
		(rule__Iff__Group__0)
		{ after(grammarAccess.getIffAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIf
entryRuleIf
:
{ before(grammarAccess.getIfRule()); }
	 ruleIf
{ after(grammarAccess.getIfRule()); } 
	 EOF 
;

// Rule If
ruleIf 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfAccess().getGroup()); }
		(rule__If__Group__0)
		{ after(grammarAccess.getIfAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXor
entryRuleXor
:
{ before(grammarAccess.getXorRule()); }
	 ruleXor
{ after(grammarAccess.getXorRule()); } 
	 EOF 
;

// Rule Xor
ruleXor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXorAccess().getGroup()); }
		(rule__Xor__Group__0)
		{ after(grammarAccess.getXorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOr
entryRuleOr
:
{ before(grammarAccess.getOrRule()); }
	 ruleOr
{ after(grammarAccess.getOrRule()); } 
	 EOF 
;

// Rule Or
ruleOr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrAccess().getGroup()); }
		(rule__Or__Group__0)
		{ after(grammarAccess.getOrAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnd
entryRuleAnd
:
{ before(grammarAccess.getAndRule()); }
	 ruleAnd
{ after(grammarAccess.getAndRule()); } 
	 EOF 
;

// Rule And
ruleAnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndAccess().getGroup()); }
		(rule__And__Group__0)
		{ after(grammarAccess.getAndAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnaryFormula
entryRuleUnaryFormula
:
{ before(grammarAccess.getUnaryFormulaRule()); }
	 ruleUnaryFormula
{ after(grammarAccess.getUnaryFormulaRule()); } 
	 EOF 
;

// Rule UnaryFormula
ruleUnaryFormula 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnaryFormulaAccess().getNotParserRuleCall()); }
		ruleNot
		{ after(grammarAccess.getUnaryFormulaAccess().getNotParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNot
entryRuleNot
:
{ before(grammarAccess.getNotRule()); }
	 ruleNot
{ after(grammarAccess.getNotRule()); } 
	 EOF 
;

// Rule Not
ruleNot 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNotAccess().getGroup()); }
		(rule__Not__Group__0)
		{ after(grammarAccess.getNotAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePredicate
entryRulePredicate
:
{ before(grammarAccess.getPredicateRule()); }
	 rulePredicate
{ after(grammarAccess.getPredicateRule()); } 
	 EOF 
;

// Rule Predicate
rulePredicate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPredicateAccess().getAlternatives()); }
		(rule__Predicate__Alternatives)
		{ after(grammarAccess.getPredicateAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEquals
entryRuleEquals
:
{ before(grammarAccess.getEqualsRule()); }
	 ruleEquals
{ after(grammarAccess.getEqualsRule()); } 
	 EOF 
;

// Rule Equals
ruleEquals 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEqualsAccess().getGroup()); }
		(rule__Equals__Group__0)
		{ after(grammarAccess.getEqualsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInequality
entryRuleInequality
:
{ before(grammarAccess.getInequalityRule()); }
	 ruleInequality
{ after(grammarAccess.getInequalityRule()); } 
	 EOF 
;

// Rule Inequality
ruleInequality 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInequalityAccess().getAlternatives()); }
		(rule__Inequality__Alternatives)
		{ after(grammarAccess.getInequalityAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGreater
entryRuleGreater
:
{ before(grammarAccess.getGreaterRule()); }
	 ruleGreater
{ after(grammarAccess.getGreaterRule()); } 
	 EOF 
;

// Rule Greater
ruleGreater 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGreaterAccess().getGroup()); }
		(rule__Greater__Group__0)
		{ after(grammarAccess.getGreaterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGreaterEqual
entryRuleGreaterEqual
:
{ before(grammarAccess.getGreaterEqualRule()); }
	 ruleGreaterEqual
{ after(grammarAccess.getGreaterEqualRule()); } 
	 EOF 
;

// Rule GreaterEqual
ruleGreaterEqual 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGreaterEqualAccess().getGroup()); }
		(rule__GreaterEqual__Group__0)
		{ after(grammarAccess.getGreaterEqualAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSmaller
entryRuleSmaller
:
{ before(grammarAccess.getSmallerRule()); }
	 ruleSmaller
{ after(grammarAccess.getSmallerRule()); } 
	 EOF 
;

// Rule Smaller
ruleSmaller 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSmallerAccess().getGroup()); }
		(rule__Smaller__Group__0)
		{ after(grammarAccess.getSmallerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSmallerEqual
entryRuleSmallerEqual
:
{ before(grammarAccess.getSmallerEqualRule()); }
	 ruleSmallerEqual
{ after(grammarAccess.getSmallerEqualRule()); } 
	 EOF 
;

// Rule SmallerEqual
ruleSmallerEqual 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSmallerEqualAccess().getGroup()); }
		(rule__SmallerEqual__Group__0)
		{ after(grammarAccess.getSmallerEqualAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIsEmpty
entryRuleIsEmpty
:
{ before(grammarAccess.getIsEmptyRule()); }
	 ruleIsEmpty
{ after(grammarAccess.getIsEmptyRule()); } 
	 EOF 
;

// Rule IsEmpty
ruleIsEmpty 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIsEmptyAccess().getGroup()); }
		(rule__IsEmpty__Group__0)
		{ after(grammarAccess.getIsEmptyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIsInstanceOf
entryRuleIsInstanceOf
:
{ before(grammarAccess.getIsInstanceOfRule()); }
	 ruleIsInstanceOf
{ after(grammarAccess.getIsInstanceOfRule()); } 
	 EOF 
;

// Rule IsInstanceOf
ruleIsInstanceOf 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIsInstanceOfAccess().getGroup()); }
		(rule__IsInstanceOf__Group__0)
		{ after(grammarAccess.getIsInstanceOfAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIsValueLiteralOf
entryRuleIsValueLiteralOf
:
{ before(grammarAccess.getIsValueLiteralOfRule()); }
	 ruleIsValueLiteralOf
{ after(grammarAccess.getIsValueLiteralOfRule()); } 
	 EOF 
;

// Rule IsValueLiteralOf
ruleIsValueLiteralOf 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIsValueLiteralOfAccess().getGroup()); }
		(rule__IsValueLiteralOf__Group__0)
		{ after(grammarAccess.getIsValueLiteralOfAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQuantifier
entryRuleQuantifier
:
{ before(grammarAccess.getQuantifierRule()); }
	 ruleQuantifier
{ after(grammarAccess.getQuantifierRule()); } 
	 EOF 
;

// Rule Quantifier
ruleQuantifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQuantifierAccess().getAlternatives()); }
		(rule__Quantifier__Alternatives)
		{ after(grammarAccess.getQuantifierAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForAll
entryRuleForAll
:
{ before(grammarAccess.getForAllRule()); }
	 ruleForAll
{ after(grammarAccess.getForAllRule()); } 
	 EOF 
;

// Rule ForAll
ruleForAll 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForAllAccess().getGroup()); }
		(rule__ForAll__Group__0)
		{ after(grammarAccess.getForAllAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExists
entryRuleExists
:
{ before(grammarAccess.getExistsRule()); }
	 ruleExists
{ after(grammarAccess.getExistsRule()); } 
	 EOF 
;

// Rule Exists
ruleExists 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExistsAccess().getGroup()); }
		(rule__Exists__Group__0)
		{ after(grammarAccess.getExistsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression
:
{ before(grammarAccess.getBooleanExpressionRule()); }
	 ruleBooleanExpression
{ after(grammarAccess.getBooleanExpressionRule()); } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanExpressionAccess().getAlternatives()); }
		(rule__BooleanExpression__Alternatives)
		{ after(grammarAccess.getBooleanExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTerm
entryRuleTerm
:
{ before(grammarAccess.getTermRule()); }
	 ruleTerm
{ after(grammarAccess.getTermRule()); } 
	 EOF 
;

// Rule Term
ruleTerm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTermAccess().getAlternatives()); }
		(rule__Term__Alternatives)
		{ after(grammarAccess.getTermAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableRef
entryRuleVariableRef
:
{ before(grammarAccess.getVariableRefRule()); }
	 ruleVariableRef
{ after(grammarAccess.getVariableRefRule()); } 
	 EOF 
;

// Rule VariableRef
ruleVariableRef 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableRefAccess().getGroup()); }
		(rule__VariableRef__Group__0)
		{ after(grammarAccess.getVariableRefAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGet
entryRuleGet
:
{ before(grammarAccess.getGetRule()); }
	 ruleGet
{ after(grammarAccess.getGetRule()); } 
	 EOF 
;

// Rule Get
ruleGet 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGetAccess().getGroup()); }
		(rule__Get__Group__0)
		{ after(grammarAccess.getGetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGetContainer
entryRuleGetContainer
:
{ before(grammarAccess.getGetContainerRule()); }
	 ruleGetContainer
{ after(grammarAccess.getGetContainerRule()); } 
	 EOF 
;

// Rule GetContainer
ruleGetContainer 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGetContainerAccess().getGroup()); }
		(rule__GetContainer__Group__0)
		{ after(grammarAccess.getGetContainerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGetContainments
entryRuleGetContainments
:
{ before(grammarAccess.getGetContainmentsRule()); }
	 ruleGetContainments
{ after(grammarAccess.getGetContainmentsRule()); } 
	 EOF 
;

// Rule GetContainments
ruleGetContainments 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGetContainmentsAccess().getGroup()); }
		(rule__GetContainments__Group__0)
		{ after(grammarAccess.getGetContainmentsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGetClosure
entryRuleGetClosure
:
{ before(grammarAccess.getGetClosureRule()); }
	 ruleGetClosure
{ after(grammarAccess.getGetClosureRule()); } 
	 EOF 
;

// Rule GetClosure
ruleGetClosure 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGetClosureAccess().getGroup()); }
		(rule__GetClosure__Group__0)
		{ after(grammarAccess.getGetClosureAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSize
entryRuleSize
:
{ before(grammarAccess.getSizeRule()); }
	 ruleSize
{ after(grammarAccess.getSizeRule()); } 
	 EOF 
;

// Rule Size
ruleSize 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSizeAccess().getGroup()); }
		(rule__Size__Group__0)
		{ after(grammarAccess.getSizeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIndexOf
entryRuleIndexOf
:
{ before(grammarAccess.getIndexOfRule()); }
	 ruleIndexOf
{ after(grammarAccess.getIndexOfRule()); } 
	 EOF 
;

// Rule IndexOf
ruleIndexOf 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIndexOfAccess().getGroup()); }
		(rule__IndexOf__Group__0)
		{ after(grammarAccess.getIndexOfAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConcatenate
entryRuleConcatenate
:
{ before(grammarAccess.getConcatenateRule()); }
	 ruleConcatenate
{ after(grammarAccess.getConcatenateRule()); } 
	 EOF 
;

// Rule Concatenate
ruleConcatenate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConcatenateAccess().getGroup()); }
		(rule__Concatenate__Group__0)
		{ after(grammarAccess.getConcatenateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCapitalize
entryRuleCapitalize
:
{ before(grammarAccess.getCapitalizeRule()); }
	 ruleCapitalize
{ after(grammarAccess.getCapitalizeRule()); } 
	 EOF 
;

// Rule Capitalize
ruleCapitalize 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCapitalizeAccess().getGroup()); }
		(rule__Capitalize__Group__0)
		{ after(grammarAccess.getCapitalizeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIterator
entryRuleIterator
:
{ before(grammarAccess.getIteratorRule()); }
	 ruleIterator
{ after(grammarAccess.getIteratorRule()); } 
	 EOF 
;

// Rule Iterator
ruleIterator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIteratorAccess().getSelectParserRuleCall()); }
		ruleSelect
		{ after(grammarAccess.getIteratorAccess().getSelectParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelect
entryRuleSelect
:
{ before(grammarAccess.getSelectRule()); }
	 ruleSelect
{ after(grammarAccess.getSelectRule()); } 
	 EOF 
;

// Rule Select
ruleSelect 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectAccess().getGroup()); }
		(rule__Select__Group__0)
		{ after(grammarAccess.getSelectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFeatureConstant
entryRuleFeatureConstant
:
{ before(grammarAccess.getFeatureConstantRule()); }
	 ruleFeatureConstant
{ after(grammarAccess.getFeatureConstantRule()); } 
	 EOF 
;

// Rule FeatureConstant
ruleFeatureConstant 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFeatureConstantAccess().getConstantAssignment()); }
		(rule__FeatureConstant__ConstantAssignment)
		{ after(grammarAccess.getFeatureConstantAccess().getConstantAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClassifier
entryRuleClassifier
:
{ before(grammarAccess.getClassifierRule()); }
	 ruleClassifier
{ after(grammarAccess.getClassifierRule()); } 
	 EOF 
;

// Rule Classifier
ruleClassifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClassifierAccess().getAlternatives()); }
		(rule__Classifier__Alternatives)
		{ after(grammarAccess.getClassifierAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClassifierConstant
entryRuleClassifierConstant
:
{ before(grammarAccess.getClassifierConstantRule()); }
	 ruleClassifierConstant
{ after(grammarAccess.getClassifierConstantRule()); } 
	 EOF 
;

// Rule ClassifierConstant
ruleClassifierConstant 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClassifierConstantAccess().getConstantAssignment()); }
		(rule__ClassifierConstant__ConstantAssignment)
		{ after(grammarAccess.getClassifierConstantAccess().getConstantAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAsClassifier
entryRuleAsClassifier
:
{ before(grammarAccess.getAsClassifierRule()); }
	 ruleAsClassifier
{ after(grammarAccess.getAsClassifierRule()); } 
	 EOF 
;

// Rule AsClassifier
ruleAsClassifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAsClassifierAccess().getGroup()); }
		(rule__AsClassifier__Group__0)
		{ after(grammarAccess.getAsClassifierAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDataType
entryRuleDataType
:
{ before(grammarAccess.getDataTypeRule()); }
	 ruleDataType
{ after(grammarAccess.getDataTypeRule()); } 
	 EOF 
;

// Rule DataType
ruleDataType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDataTypeAccess().getAlternatives()); }
		(rule__DataType__Alternatives)
		{ after(grammarAccess.getDataTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDataTypeConstant
entryRuleDataTypeConstant
:
{ before(grammarAccess.getDataTypeConstantRule()); }
	 ruleDataTypeConstant
{ after(grammarAccess.getDataTypeConstantRule()); } 
	 EOF 
;

// Rule DataTypeConstant
ruleDataTypeConstant 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDataTypeConstantAccess().getConstantAssignment()); }
		(rule__DataTypeConstant__ConstantAssignment)
		{ after(grammarAccess.getDataTypeConstantAccess().getConstantAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAsDataType
entryRuleAsDataType
:
{ before(grammarAccess.getAsDataTypeRule()); }
	 ruleAsDataType
{ after(grammarAccess.getAsDataTypeRule()); } 
	 EOF 
;

// Rule AsDataType
ruleAsDataType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAsDataTypeAccess().getGroup()); }
		(rule__AsDataType__Group__0)
		{ after(grammarAccess.getAsDataTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstant
entryRuleConstant
:
{ before(grammarAccess.getConstantRule()); }
	 ruleConstant
{ after(grammarAccess.getConstantRule()); } 
	 EOF 
;

// Rule Constant
ruleConstant 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstantAccess().getAlternatives()); }
		(rule__Constant__Alternatives)
		{ after(grammarAccess.getConstantAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntConstant
entryRuleIntConstant
:
{ before(grammarAccess.getIntConstantRule()); }
	 ruleIntConstant
{ after(grammarAccess.getIntConstantRule()); } 
	 EOF 
;

// Rule IntConstant
ruleIntConstant 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntConstantAccess().getValueAssignment()); }
		(rule__IntConstant__ValueAssignment)
		{ after(grammarAccess.getIntConstantAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringConstant
entryRuleStringConstant
:
{ before(grammarAccess.getStringConstantRule()); }
	 ruleStringConstant
{ after(grammarAccess.getStringConstantRule()); } 
	 EOF 
;

// Rule StringConstant
ruleStringConstant 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringConstantAccess().getValueAssignment()); }
		(rule__StringConstant__ValueAssignment)
		{ after(grammarAccess.getStringConstantAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolConstant
entryRuleBoolConstant
:
{ before(grammarAccess.getBoolConstantRule()); }
	 ruleBoolConstant
{ after(grammarAccess.getBoolConstantRule()); } 
	 EOF 
;

// Rule BoolConstant
ruleBoolConstant 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoolConstantAccess().getValueAssignment()); }
		(rule__BoolConstant__ValueAssignment)
		{ after(grammarAccess.getBoolConstantAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateAccess().getEqualsParserRuleCall_0()); }
		ruleEquals
		{ after(grammarAccess.getPredicateAccess().getEqualsParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPredicateAccess().getInequalityParserRuleCall_1()); }
		ruleInequality
		{ after(grammarAccess.getPredicateAccess().getInequalityParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPredicateAccess().getIsEmptyParserRuleCall_2()); }
		ruleIsEmpty
		{ after(grammarAccess.getPredicateAccess().getIsEmptyParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getPredicateAccess().getIsInstanceOfParserRuleCall_3()); }
		ruleIsInstanceOf
		{ after(grammarAccess.getPredicateAccess().getIsInstanceOfParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getPredicateAccess().getIsValueLiteralOfParserRuleCall_4()); }
		ruleIsValueLiteralOf
		{ after(grammarAccess.getPredicateAccess().getIsValueLiteralOfParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Inequality__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInequalityAccess().getGreaterParserRuleCall_0()); }
		ruleGreater
		{ after(grammarAccess.getInequalityAccess().getGreaterParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getInequalityAccess().getGreaterEqualParserRuleCall_1()); }
		ruleGreaterEqual
		{ after(grammarAccess.getInequalityAccess().getGreaterEqualParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getInequalityAccess().getSmallerParserRuleCall_2()); }
		ruleSmaller
		{ after(grammarAccess.getInequalityAccess().getSmallerParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getInequalityAccess().getSmallerEqualParserRuleCall_3()); }
		ruleSmallerEqual
		{ after(grammarAccess.getInequalityAccess().getSmallerEqualParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQuantifierAccess().getForAllParserRuleCall_0()); }
		ruleForAll
		{ after(grammarAccess.getQuantifierAccess().getForAllParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getQuantifierAccess().getExistsParserRuleCall_1()); }
		ruleExists
		{ after(grammarAccess.getQuantifierAccess().getExistsParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanExpressionAccess().getGroup_0()); }
		(rule__BooleanExpression__Group_0__0)
		{ after(grammarAccess.getBooleanExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanExpressionAccess().getUnaryFormulaParserRuleCall_1()); }
		ruleUnaryFormula
		{ after(grammarAccess.getBooleanExpressionAccess().getUnaryFormulaParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanExpressionAccess().getQuantifierParserRuleCall_2()); }
		ruleQuantifier
		{ after(grammarAccess.getBooleanExpressionAccess().getQuantifierParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanExpressionAccess().getPredicateParserRuleCall_3()); }
		rulePredicate
		{ after(grammarAccess.getBooleanExpressionAccess().getPredicateParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanExpressionAccess().getBoolConstantParserRuleCall_4()); }
		ruleBoolConstant
		{ after(grammarAccess.getBooleanExpressionAccess().getBoolConstantParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTermAccess().getConstantParserRuleCall_0()); }
		ruleConstant
		{ after(grammarAccess.getTermAccess().getConstantParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTermAccess().getVariableRefParserRuleCall_1()); }
		ruleVariableRef
		{ after(grammarAccess.getTermAccess().getVariableRefParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getTermAccess().getGetContainmentsParserRuleCall_2()); }
		ruleGetContainments
		{ after(grammarAccess.getTermAccess().getGetContainmentsParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getTermAccess().getGetContainerParserRuleCall_3()); }
		ruleGetContainer
		{ after(grammarAccess.getTermAccess().getGetContainerParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getTermAccess().getGetClosureParserRuleCall_4()); }
		ruleGetClosure
		{ after(grammarAccess.getTermAccess().getGetClosureParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getTermAccess().getSizeParserRuleCall_5()); }
		ruleSize
		{ after(grammarAccess.getTermAccess().getSizeParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getTermAccess().getIndexOfParserRuleCall_6()); }
		ruleIndexOf
		{ after(grammarAccess.getTermAccess().getIndexOfParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getTermAccess().getConcatenateParserRuleCall_7()); }
		ruleConcatenate
		{ after(grammarAccess.getTermAccess().getConcatenateParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getTermAccess().getCapitalizeParserRuleCall_8()); }
		ruleCapitalize
		{ after(grammarAccess.getTermAccess().getCapitalizeParserRuleCall_8()); }
	)
	|
	(
		{ before(grammarAccess.getTermAccess().getIteratorParserRuleCall_9()); }
		ruleIterator
		{ after(grammarAccess.getTermAccess().getIteratorParserRuleCall_9()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Classifier__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassifierAccess().getClassifierConstantParserRuleCall_0()); }
		ruleClassifierConstant
		{ after(grammarAccess.getClassifierAccess().getClassifierConstantParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getClassifierAccess().getAsClassifierParserRuleCall_1()); }
		ruleAsClassifier
		{ after(grammarAccess.getClassifierAccess().getAsClassifierParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDataTypeAccess().getDataTypeConstantParserRuleCall_0()); }
		ruleDataTypeConstant
		{ after(grammarAccess.getDataTypeAccess().getDataTypeConstantParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getDataTypeAccess().getAsDataTypeParserRuleCall_1()); }
		ruleAsDataType
		{ after(grammarAccess.getDataTypeAccess().getAsDataTypeParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantAccess().getIntConstantParserRuleCall_0()); }
		ruleIntConstant
		{ after(grammarAccess.getConstantAccess().getIntConstantParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getConstantAccess().getStringConstantParserRuleCall_1()); }
		ruleStringConstant
		{ after(grammarAccess.getConstantAccess().getStringConstantParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getConstantAccess().getBoolConstantParserRuleCall_2()); }
		ruleBoolConstant
		{ after(grammarAccess.getConstantAccess().getBoolConstantParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintLibrary__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstraintLibrary__Group__0__Impl
	rule__ConstraintLibrary__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintLibrary__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintLibraryAccess().getDomainsAssignment_0()); }
	(rule__ConstraintLibrary__DomainsAssignment_0)*
	{ after(grammarAccess.getConstraintLibraryAccess().getDomainsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintLibrary__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstraintLibrary__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintLibrary__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintLibraryAccess().getConstraintsAssignment_1()); }
	(rule__ConstraintLibrary__ConstraintsAssignment_1)*
	{ after(grammarAccess.getConstraintLibraryAccess().getConstraintsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Domain__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Domain__Group__0__Impl
	rule__Domain__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Domain__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDomainAccess().getDomainKeyword_0()); }
	'domain'
	{ after(grammarAccess.getDomainAccess().getDomainKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Domain__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Domain__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Domain__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDomainAccess().getDomainAssignment_1()); }
	(rule__Domain__DomainAssignment_1)
	{ after(grammarAccess.getDomainAccess().getDomainAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__0__Impl
	rule__Constraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getConstraintKeyword_0()); }
	'constraint'
	{ after(grammarAccess.getConstraintAccess().getConstraintKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__1__Impl
	rule__Constraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getNameAssignment_1()); }
	(rule__Constraint__NameAssignment_1)
	{ after(grammarAccess.getConstraintAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__2__Impl
	rule__Constraint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getMessageKeyword_2()); }
	'message'
	{ after(grammarAccess.getConstraintAccess().getMessageKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__3__Impl
	rule__Constraint__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getMessageAssignment_3()); }
	(rule__Constraint__MessageAssignment_3)
	{ after(grammarAccess.getConstraintAccess().getMessageAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__4__Impl
	rule__Constraint__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getContextKeyword_4()); }
	'context'
	{ after(grammarAccess.getConstraintAccess().getContextKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__5__Impl
	rule__Constraint__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getVariableAssignment_5()); }
	(rule__Constraint__VariableAssignment_5)
	{ after(grammarAccess.getConstraintAccess().getVariableAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__6__Impl
	rule__Constraint__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getColonKeyword_6()); }
	':'
	{ after(grammarAccess.getConstraintAccess().getColonKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getFormulaAssignment_7()); }
	(rule__Constraint__FormulaAssignment_7)
	{ after(grammarAccess.getConstraintAccess().getFormulaAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__0__Impl
	rule__Variable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getTypeAssignment_0()); }
	(rule__Variable__TypeAssignment_0)
	{ after(grammarAccess.getVariableAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getNameAssignment_1()); }
	(rule__Variable__NameAssignment_1)
	{ after(grammarAccess.getVariableAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Iff__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Iff__Group__0__Impl
	rule__Iff__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Iff__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIffAccess().getIfParserRuleCall_0()); }
	ruleIf
	{ after(grammarAccess.getIffAccess().getIfParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Iff__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Iff__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Iff__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIffAccess().getGroup_1()); }
	(rule__Iff__Group_1__0)*
	{ after(grammarAccess.getIffAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Iff__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Iff__Group_1__0__Impl
	rule__Iff__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Iff__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIffAccess().getIffLeftAction_1_0()); }
	()
	{ after(grammarAccess.getIffAccess().getIffLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Iff__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Iff__Group_1__1__Impl
	rule__Iff__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Iff__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIffAccess().getEqualsSignKeyword_1_1()); }
	'='
	{ after(grammarAccess.getIffAccess().getEqualsSignKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Iff__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Iff__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Iff__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIffAccess().getRightAssignment_1_2()); }
	(rule__Iff__RightAssignment_1_2)
	{ after(grammarAccess.getIffAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__0__Impl
	rule__If__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getXorParserRuleCall_0()); }
	ruleXor
	{ after(grammarAccess.getIfAccess().getXorParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getGroup_1()); }
	(rule__If__Group_1__0)*
	{ after(grammarAccess.getIfAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_1__0__Impl
	rule__If__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getIfLeftAction_1_0()); }
	()
	{ after(grammarAccess.getIfAccess().getIfLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_1__1__Impl
	rule__If__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getImpliesKeyword_1_1()); }
	'implies'
	{ after(grammarAccess.getIfAccess().getImpliesKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getRightAssignment_1_2()); }
	(rule__If__RightAssignment_1_2)
	{ after(grammarAccess.getIfAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Xor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Xor__Group__0__Impl
	rule__Xor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorAccess().getOrParserRuleCall_0()); }
	ruleOr
	{ after(grammarAccess.getXorAccess().getOrParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Xor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorAccess().getGroup_1()); }
	(rule__Xor__Group_1__0)*
	{ after(grammarAccess.getXorAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Xor__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Xor__Group_1__0__Impl
	rule__Xor__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorAccess().getXorLeftAction_1_0()); }
	()
	{ after(grammarAccess.getXorAccess().getXorLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Xor__Group_1__1__Impl
	rule__Xor__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorAccess().getXorKeyword_1_1()); }
	'xor'
	{ after(grammarAccess.getXorAccess().getXorKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Xor__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorAccess().getRightAssignment_1_2()); }
	(rule__Xor__RightAssignment_1_2)
	{ after(grammarAccess.getXorAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__0__Impl
	rule__Or__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
	ruleAnd
	{ after(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getGroup_1()); }
	(rule__Or__Group_1__0)*
	{ after(grammarAccess.getOrAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__0__Impl
	rule__Or__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
	()
	{ after(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__1__Impl
	rule__Or__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getOrKeyword_1_1()); }
	'or'
	{ after(grammarAccess.getOrAccess().getOrKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
	(rule__Or__RightAssignment_1_2)
	{ after(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__0__Impl
	rule__And__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getBooleanExpressionParserRuleCall_0()); }
	ruleBooleanExpression
	{ after(grammarAccess.getAndAccess().getBooleanExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getGroup_1()); }
	(rule__And__Group_1__0)*
	{ after(grammarAccess.getAndAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__0__Impl
	rule__And__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__1__Impl
	rule__And__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAndKeyword_1_1()); }
	'and'
	{ after(grammarAccess.getAndAccess().getAndKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
	(rule__And__RightAssignment_1_2)
	{ after(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Not__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group__0__Impl
	rule__Not__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getNotAction_0()); }
	()
	{ after(grammarAccess.getNotAccess().getNotAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group__1__Impl
	rule__Not__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getNotKeyword_1()); }
	'not'
	{ after(grammarAccess.getNotAccess().getNotKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group__2__Impl
	rule__Not__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getNotAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group__3__Impl
	rule__Not__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getNotAssignment_3()); }
	(rule__Not__NotAssignment_3)
	{ after(grammarAccess.getNotAccess().getNotAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getNotAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Equals__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equals__Group__0__Impl
	rule__Equals__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equals__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualsAccess().getIsEqualKeyword_0()); }
	'isEqual'
	{ after(grammarAccess.getEqualsAccess().getIsEqualKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equals__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equals__Group__1__Impl
	rule__Equals__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Equals__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualsAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getEqualsAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equals__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equals__Group__2__Impl
	rule__Equals__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Equals__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualsAccess().getLeftAssignment_2()); }
	(rule__Equals__LeftAssignment_2)
	{ after(grammarAccess.getEqualsAccess().getLeftAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equals__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equals__Group__3__Impl
	rule__Equals__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Equals__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualsAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getEqualsAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equals__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equals__Group__4__Impl
	rule__Equals__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Equals__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualsAccess().getRightAssignment_4()); }
	(rule__Equals__RightAssignment_4)
	{ after(grammarAccess.getEqualsAccess().getRightAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equals__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equals__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equals__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualsAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getEqualsAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Greater__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Greater__Group__0__Impl
	rule__Greater__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Greater__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGreaterAccess().getIsGreaterKeyword_0()); }
	'isGreater'
	{ after(grammarAccess.getGreaterAccess().getIsGreaterKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Greater__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Greater__Group__1__Impl
	rule__Greater__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Greater__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGreaterAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getGreaterAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Greater__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Greater__Group__2__Impl
	rule__Greater__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Greater__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGreaterAccess().getLeftAssignment_2()); }
	(rule__Greater__LeftAssignment_2)
	{ after(grammarAccess.getGreaterAccess().getLeftAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Greater__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Greater__Group__3__Impl
	rule__Greater__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Greater__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGreaterAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getGreaterAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Greater__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Greater__Group__4__Impl
	rule__Greater__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Greater__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGreaterAccess().getRightAssignment_4()); }
	(rule__Greater__RightAssignment_4)
	{ after(grammarAccess.getGreaterAccess().getRightAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Greater__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Greater__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Greater__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGreaterAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getGreaterAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GreaterEqual__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GreaterEqual__Group__0__Impl
	rule__GreaterEqual__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GreaterEqual__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGreaterEqualAccess().getIsGreaterEqualKeyword_0()); }
	'isGreaterEqual'
	{ after(grammarAccess.getGreaterEqualAccess().getIsGreaterEqualKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GreaterEqual__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GreaterEqual__Group__1__Impl
	rule__GreaterEqual__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GreaterEqual__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGreaterEqualAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getGreaterEqualAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GreaterEqual__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GreaterEqual__Group__2__Impl
	rule__GreaterEqual__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GreaterEqual__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGreaterEqualAccess().getLeftAssignment_2()); }
	(rule__GreaterEqual__LeftAssignment_2)
	{ after(grammarAccess.getGreaterEqualAccess().getLeftAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GreaterEqual__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GreaterEqual__Group__3__Impl
	rule__GreaterEqual__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__GreaterEqual__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGreaterEqualAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getGreaterEqualAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GreaterEqual__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GreaterEqual__Group__4__Impl
	rule__GreaterEqual__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__GreaterEqual__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGreaterEqualAccess().getRightAssignment_4()); }
	(rule__GreaterEqual__RightAssignment_4)
	{ after(grammarAccess.getGreaterEqualAccess().getRightAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GreaterEqual__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GreaterEqual__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GreaterEqual__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGreaterEqualAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getGreaterEqualAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Smaller__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Smaller__Group__0__Impl
	rule__Smaller__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Smaller__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSmallerAccess().getIsSmallerKeyword_0()); }
	'isSmaller'
	{ after(grammarAccess.getSmallerAccess().getIsSmallerKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Smaller__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Smaller__Group__1__Impl
	rule__Smaller__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Smaller__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSmallerAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getSmallerAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Smaller__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Smaller__Group__2__Impl
	rule__Smaller__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Smaller__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSmallerAccess().getLeftAssignment_2()); }
	(rule__Smaller__LeftAssignment_2)
	{ after(grammarAccess.getSmallerAccess().getLeftAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Smaller__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Smaller__Group__3__Impl
	rule__Smaller__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Smaller__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSmallerAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getSmallerAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Smaller__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Smaller__Group__4__Impl
	rule__Smaller__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Smaller__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSmallerAccess().getRightAssignment_4()); }
	(rule__Smaller__RightAssignment_4)
	{ after(grammarAccess.getSmallerAccess().getRightAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Smaller__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Smaller__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Smaller__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSmallerAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getSmallerAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SmallerEqual__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SmallerEqual__Group__0__Impl
	rule__SmallerEqual__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SmallerEqual__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSmallerEqualAccess().getIsSmallerEqualKeyword_0()); }
	'isSmallerEqual'
	{ after(grammarAccess.getSmallerEqualAccess().getIsSmallerEqualKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SmallerEqual__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SmallerEqual__Group__1__Impl
	rule__SmallerEqual__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SmallerEqual__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSmallerEqualAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getSmallerEqualAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SmallerEqual__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SmallerEqual__Group__2__Impl
	rule__SmallerEqual__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SmallerEqual__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSmallerEqualAccess().getLeftAssignment_2()); }
	(rule__SmallerEqual__LeftAssignment_2)
	{ after(grammarAccess.getSmallerEqualAccess().getLeftAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SmallerEqual__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SmallerEqual__Group__3__Impl
	rule__SmallerEqual__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SmallerEqual__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSmallerEqualAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getSmallerEqualAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SmallerEqual__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SmallerEqual__Group__4__Impl
	rule__SmallerEqual__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SmallerEqual__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSmallerEqualAccess().getRightAssignment_4()); }
	(rule__SmallerEqual__RightAssignment_4)
	{ after(grammarAccess.getSmallerEqualAccess().getRightAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SmallerEqual__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SmallerEqual__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SmallerEqual__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSmallerEqualAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getSmallerEqualAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IsEmpty__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsEmpty__Group__0__Impl
	rule__IsEmpty__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IsEmpty__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsEmptyAccess().getIsEmptyKeyword_0()); }
	'isEmpty'
	{ after(grammarAccess.getIsEmptyAccess().getIsEmptyKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsEmpty__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsEmpty__Group__1__Impl
	rule__IsEmpty__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IsEmpty__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsEmptyAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getIsEmptyAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsEmpty__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsEmpty__Group__2__Impl
	rule__IsEmpty__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IsEmpty__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsEmptyAccess().getTermAssignment_2()); }
	(rule__IsEmpty__TermAssignment_2)
	{ after(grammarAccess.getIsEmptyAccess().getTermAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsEmpty__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsEmpty__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IsEmpty__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsEmptyAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getIsEmptyAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IsInstanceOf__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsInstanceOf__Group__0__Impl
	rule__IsInstanceOf__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IsInstanceOf__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsInstanceOfAccess().getIsInstanceOfKeyword_0()); }
	'isInstanceOf'
	{ after(grammarAccess.getIsInstanceOfAccess().getIsInstanceOfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsInstanceOf__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsInstanceOf__Group__1__Impl
	rule__IsInstanceOf__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IsInstanceOf__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsInstanceOfAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getIsInstanceOfAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsInstanceOf__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsInstanceOf__Group__2__Impl
	rule__IsInstanceOf__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IsInstanceOf__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsInstanceOfAccess().getTermAssignment_2()); }
	(rule__IsInstanceOf__TermAssignment_2)
	{ after(grammarAccess.getIsInstanceOfAccess().getTermAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsInstanceOf__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsInstanceOf__Group__3__Impl
	rule__IsInstanceOf__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IsInstanceOf__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsInstanceOfAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getIsInstanceOfAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsInstanceOf__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsInstanceOf__Group__4__Impl
	rule__IsInstanceOf__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IsInstanceOf__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsInstanceOfAccess().getTypeAssignment_4()); }
	(rule__IsInstanceOf__TypeAssignment_4)
	{ after(grammarAccess.getIsInstanceOfAccess().getTypeAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsInstanceOf__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsInstanceOf__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IsInstanceOf__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsInstanceOfAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getIsInstanceOfAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IsValueLiteralOf__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsValueLiteralOf__Group__0__Impl
	rule__IsValueLiteralOf__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IsValueLiteralOf__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsValueLiteralOfAccess().getIsValueLiteralOfKeyword_0()); }
	'isValueLiteralOf'
	{ after(grammarAccess.getIsValueLiteralOfAccess().getIsValueLiteralOfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsValueLiteralOf__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsValueLiteralOf__Group__1__Impl
	rule__IsValueLiteralOf__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IsValueLiteralOf__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsValueLiteralOfAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getIsValueLiteralOfAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsValueLiteralOf__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsValueLiteralOf__Group__2__Impl
	rule__IsValueLiteralOf__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IsValueLiteralOf__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsValueLiteralOfAccess().getTermAssignment_2()); }
	(rule__IsValueLiteralOf__TermAssignment_2)
	{ after(grammarAccess.getIsValueLiteralOfAccess().getTermAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsValueLiteralOf__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsValueLiteralOf__Group__3__Impl
	rule__IsValueLiteralOf__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IsValueLiteralOf__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsValueLiteralOfAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getIsValueLiteralOfAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsValueLiteralOf__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsValueLiteralOf__Group__4__Impl
	rule__IsValueLiteralOf__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IsValueLiteralOf__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsValueLiteralOfAccess().getTypeAssignment_4()); }
	(rule__IsValueLiteralOf__TypeAssignment_4)
	{ after(grammarAccess.getIsValueLiteralOfAccess().getTypeAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsValueLiteralOf__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IsValueLiteralOf__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IsValueLiteralOf__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIsValueLiteralOfAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getIsValueLiteralOfAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForAll__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForAll__Group__0__Impl
	rule__ForAll__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAllAccess().getForAllAction_0()); }
	()
	{ after(grammarAccess.getForAllAccess().getForAllAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForAll__Group__1__Impl
	rule__ForAll__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAllAccess().getForAllKeyword_1()); }
	'forAll'
	{ after(grammarAccess.getForAllAccess().getForAllKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForAll__Group__2__Impl
	rule__ForAll__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAllAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getForAllAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForAll__Group__3__Impl
	rule__ForAll__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAllAccess().getNameAssignment_3()); }
	(rule__ForAll__NameAssignment_3)
	{ after(grammarAccess.getForAllAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForAll__Group__4__Impl
	rule__ForAll__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAllAccess().getInKeyword_4()); }
	'in'
	{ after(grammarAccess.getForAllAccess().getInKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForAll__Group__5__Impl
	rule__ForAll__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAllAccess().getIterationAssignment_5()); }
	(rule__ForAll__IterationAssignment_5)
	{ after(grammarAccess.getForAllAccess().getIterationAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForAll__Group__6__Impl
	rule__ForAll__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAllAccess().getColonKeyword_6()); }
	':'
	{ after(grammarAccess.getForAllAccess().getColonKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForAll__Group__7__Impl
	rule__ForAll__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAllAccess().getFormulaAssignment_7()); }
	(rule__ForAll__FormulaAssignment_7)
	{ after(grammarAccess.getForAllAccess().getFormulaAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForAll__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAllAccess().getRightParenthesisKeyword_8()); }
	')'
	{ after(grammarAccess.getForAllAccess().getRightParenthesisKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exists__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exists__Group__0__Impl
	rule__Exists__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExistsAccess().getExistsAction_0()); }
	()
	{ after(grammarAccess.getExistsAccess().getExistsAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exists__Group__1__Impl
	rule__Exists__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExistsAccess().getExistsKeyword_1()); }
	'exists'
	{ after(grammarAccess.getExistsAccess().getExistsKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exists__Group__2__Impl
	rule__Exists__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExistsAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getExistsAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exists__Group__3__Impl
	rule__Exists__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExistsAccess().getNameAssignment_3()); }
	(rule__Exists__NameAssignment_3)
	{ after(grammarAccess.getExistsAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exists__Group__4__Impl
	rule__Exists__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExistsAccess().getInKeyword_4()); }
	'in'
	{ after(grammarAccess.getExistsAccess().getInKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exists__Group__5__Impl
	rule__Exists__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExistsAccess().getIterationAssignment_5()); }
	(rule__Exists__IterationAssignment_5)
	{ after(grammarAccess.getExistsAccess().getIterationAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exists__Group__6__Impl
	rule__Exists__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExistsAccess().getColonKeyword_6()); }
	':'
	{ after(grammarAccess.getExistsAccess().getColonKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exists__Group__7__Impl
	rule__Exists__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExistsAccess().getFormulaAssignment_7()); }
	(rule__Exists__FormulaAssignment_7)
	{ after(grammarAccess.getExistsAccess().getFormulaAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exists__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExistsAccess().getRightParenthesisKeyword_8()); }
	')'
	{ after(grammarAccess.getExistsAccess().getRightParenthesisKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanExpression__Group_0__0__Impl
	rule__BooleanExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanExpressionAccess().getLeftParenthesisKeyword_0_0()); }
	'('
	{ after(grammarAccess.getBooleanExpressionAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanExpression__Group_0__1__Impl
	rule__BooleanExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanExpressionAccess().getFormulaParserRuleCall_0_1()); }
	ruleFormula
	{ after(grammarAccess.getBooleanExpressionAccess().getFormulaParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanExpressionAccess().getRightParenthesisKeyword_0_2()); }
	')'
	{ after(grammarAccess.getBooleanExpressionAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableRef__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableRef__Group__0__Impl
	rule__VariableRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableRef__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableRefAccess().getVariableRefAction_0()); }
	()
	{ after(grammarAccess.getVariableRefAccess().getVariableRefAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableRef__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableRef__Group__1__Impl
	rule__VariableRef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableRef__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableRefAccess().getNameAssignment_1()); }
	(rule__VariableRef__NameAssignment_1)
	{ after(grammarAccess.getVariableRefAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableRef__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableRef__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableRef__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableRefAccess().getGetAssignment_2()); }
	(rule__VariableRef__GetAssignment_2)?
	{ after(grammarAccess.getVariableRefAccess().getGetAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Get__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Get__Group__0__Impl
	rule__Get__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGetAccess().getFullStopKeyword_0()); }
	'.'
	{ after(grammarAccess.getGetAccess().getFullStopKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Get__Group__1__Impl
	rule__Get__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGetAccess().getGroup_1()); }
	(rule__Get__Group_1__0)?
	{ after(grammarAccess.getGetAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Get__Group__2__Impl
	rule__Get__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGetAccess().getNameAssignment_2()); }
	(rule__Get__NameAssignment_2)
	{ after(grammarAccess.getGetAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Get__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGetAccess().getNextAssignment_3()); }
	(rule__Get__NextAssignment_3)?
	{ after(grammarAccess.getGetAccess().getNextAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Get__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Get__Group_1__0__Impl
	rule__Get__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGetAccess().getTypeAssignment_1_0()); }
	(rule__Get__TypeAssignment_1_0)
	{ after(grammarAccess.getGetAccess().getTypeAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Get__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGetAccess().getColonColonKeyword_1_1()); }
	'::'
	{ after(grammarAccess.getGetAccess().getColonColonKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GetContainer__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GetContainer__Group__0__Impl
	rule__GetContainer__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GetContainer__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGetContainerAccess().getGetContainerKeyword_0()); }
	'getContainer'
	{ after(grammarAccess.getGetContainerAccess().getGetContainerKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GetContainer__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GetContainer__Group__1__Impl
	rule__GetContainer__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GetContainer__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGetContainerAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getGetContainerAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GetContainer__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GetContainer__Group__2__Impl
	rule__GetContainer__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GetContainer__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGetContainerAccess().getElementAssignment_2()); }
	(rule__GetContainer__ElementAssignment_2)
	{ after(grammarAccess.getGetContainerAccess().getElementAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GetContainer__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GetContainer__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GetContainer__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGetContainerAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getGetContainerAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GetContainments__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GetContainments__Group__0__Impl
	rule__GetContainments__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GetContainments__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGetContainmentsAccess().getGetContainmentsKeyword_0()); }
	'getContainments'
	{ after(grammarAccess.getGetContainmentsAccess().getGetContainmentsKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GetContainments__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GetContainments__Group__1__Impl
	rule__GetContainments__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GetContainments__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGetContainmentsAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getGetContainmentsAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GetContainments__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GetContainments__Group__2__Impl
	rule__GetContainments__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GetContainments__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGetContainmentsAccess().getElementAssignment_2()); }
	(rule__GetContainments__ElementAssignment_2)
	{ after(grammarAccess.getGetContainmentsAccess().getElementAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GetContainments__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GetContainments__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GetContainments__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGetContainmentsAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getGetContainmentsAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GetClosure__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GetClosure__Group__0__Impl
	rule__GetClosure__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GetClosure__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGetClosureAccess().getGetClosureKeyword_0()); }
	'getClosure'
	{ after(grammarAccess.getGetClosureAccess().getGetClosureKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GetClosure__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GetClosure__Group__1__Impl
	rule__GetClosure__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GetClosure__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGetClosureAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getGetClosureAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GetClosure__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GetClosure__Group__2__Impl
	rule__GetClosure__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GetClosure__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGetClosureAccess().getElementAssignment_2()); }
	(rule__GetClosure__ElementAssignment_2)
	{ after(grammarAccess.getGetClosureAccess().getElementAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GetClosure__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GetClosure__Group__3__Impl
	rule__GetClosure__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__GetClosure__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGetClosureAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getGetClosureAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GetClosure__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GetClosure__Group__4__Impl
	rule__GetClosure__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__GetClosure__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGetClosureAccess().getFeatureAssignment_4()); }
	(rule__GetClosure__FeatureAssignment_4)
	{ after(grammarAccess.getGetClosureAccess().getFeatureAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GetClosure__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GetClosure__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GetClosure__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGetClosureAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getGetClosureAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Size__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Size__Group__0__Impl
	rule__Size__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSizeAccess().getSizeKeyword_0()); }
	'size'
	{ after(grammarAccess.getSizeAccess().getSizeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Size__Group__1__Impl
	rule__Size__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSizeAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getSizeAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Size__Group__2__Impl
	rule__Size__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSizeAccess().getElementsAssignment_2()); }
	(rule__Size__ElementsAssignment_2)
	{ after(grammarAccess.getSizeAccess().getElementsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Size__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSizeAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getSizeAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IndexOf__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IndexOf__Group__0__Impl
	rule__IndexOf__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexOf__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexOfAccess().getIndexOfKeyword_0()); }
	'indexOf'
	{ after(grammarAccess.getIndexOfAccess().getIndexOfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexOf__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IndexOf__Group__1__Impl
	rule__IndexOf__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexOf__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexOfAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getIndexOfAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexOf__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IndexOf__Group__2__Impl
	rule__IndexOf__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexOf__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexOfAccess().getContainerAssignment_2()); }
	(rule__IndexOf__ContainerAssignment_2)
	{ after(grammarAccess.getIndexOfAccess().getContainerAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexOf__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IndexOf__Group__3__Impl
	rule__IndexOf__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexOf__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexOfAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getIndexOfAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexOf__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IndexOf__Group__4__Impl
	rule__IndexOf__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexOf__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexOfAccess().getFeatureAssignment_4()); }
	(rule__IndexOf__FeatureAssignment_4)
	{ after(grammarAccess.getIndexOfAccess().getFeatureAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexOf__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IndexOf__Group__5__Impl
	rule__IndexOf__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexOf__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexOfAccess().getCommaKeyword_5()); }
	','
	{ after(grammarAccess.getIndexOfAccess().getCommaKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexOf__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IndexOf__Group__6__Impl
	rule__IndexOf__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexOf__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexOfAccess().getElementAssignment_6()); }
	(rule__IndexOf__ElementAssignment_6)
	{ after(grammarAccess.getIndexOfAccess().getElementAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexOf__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IndexOf__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexOf__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexOfAccess().getRightParenthesisKeyword_7()); }
	')'
	{ after(grammarAccess.getIndexOfAccess().getRightParenthesisKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Concatenate__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Concatenate__Group__0__Impl
	rule__Concatenate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Concatenate__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConcatenateAccess().getConcatenateKeyword_0()); }
	'concatenate'
	{ after(grammarAccess.getConcatenateAccess().getConcatenateKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Concatenate__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Concatenate__Group__1__Impl
	rule__Concatenate__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Concatenate__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConcatenateAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getConcatenateAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Concatenate__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Concatenate__Group__2__Impl
	rule__Concatenate__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Concatenate__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConcatenateAccess().getLeftAssignment_2()); }
	(rule__Concatenate__LeftAssignment_2)
	{ after(grammarAccess.getConcatenateAccess().getLeftAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Concatenate__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Concatenate__Group__3__Impl
	rule__Concatenate__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Concatenate__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConcatenateAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getConcatenateAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Concatenate__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Concatenate__Group__4__Impl
	rule__Concatenate__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Concatenate__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConcatenateAccess().getRightAssignment_4()); }
	(rule__Concatenate__RightAssignment_4)
	{ after(grammarAccess.getConcatenateAccess().getRightAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Concatenate__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Concatenate__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Concatenate__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConcatenateAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getConcatenateAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Capitalize__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Capitalize__Group__0__Impl
	rule__Capitalize__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Capitalize__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCapitalizeAccess().getCapitalizeKeyword_0()); }
	'capitalize'
	{ after(grammarAccess.getCapitalizeAccess().getCapitalizeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Capitalize__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Capitalize__Group__1__Impl
	rule__Capitalize__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Capitalize__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCapitalizeAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getCapitalizeAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Capitalize__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Capitalize__Group__2__Impl
	rule__Capitalize__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Capitalize__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCapitalizeAccess().getStringAssignment_2()); }
	(rule__Capitalize__StringAssignment_2)
	{ after(grammarAccess.getCapitalizeAccess().getStringAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Capitalize__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Capitalize__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Capitalize__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCapitalizeAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getCapitalizeAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__0__Impl
	rule__Select__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getSelectAction_0()); }
	()
	{ after(grammarAccess.getSelectAccess().getSelectAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__1__Impl
	rule__Select__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getSelectKeyword_1()); }
	'select'
	{ after(grammarAccess.getSelectAccess().getSelectKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__2__Impl
	rule__Select__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getSelectAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__3__Impl
	rule__Select__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getNameAssignment_3()); }
	(rule__Select__NameAssignment_3)
	{ after(grammarAccess.getSelectAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__4__Impl
	rule__Select__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getInKeyword_4()); }
	'in'
	{ after(grammarAccess.getSelectAccess().getInKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__5__Impl
	rule__Select__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getIterationAssignment_5()); }
	(rule__Select__IterationAssignment_5)
	{ after(grammarAccess.getSelectAccess().getIterationAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__6__Impl
	rule__Select__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getColonKeyword_6()); }
	':'
	{ after(grammarAccess.getSelectAccess().getColonKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__7__Impl
	rule__Select__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getFormulaAssignment_7()); }
	(rule__Select__FormulaAssignment_7)
	{ after(grammarAccess.getSelectAccess().getFormulaAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getRightParenthesisKeyword_8()); }
	')'
	{ after(grammarAccess.getSelectAccess().getRightParenthesisKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AsClassifier__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AsClassifier__Group__0__Impl
	rule__AsClassifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AsClassifier__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAsClassifierAccess().getAsClassifierKeyword_0()); }
	'asClassifier'
	{ after(grammarAccess.getAsClassifierAccess().getAsClassifierKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AsClassifier__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AsClassifier__Group__1__Impl
	rule__AsClassifier__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AsClassifier__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAsClassifierAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getAsClassifierAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AsClassifier__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AsClassifier__Group__2__Impl
	rule__AsClassifier__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AsClassifier__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAsClassifierAccess().getTermAssignment_2()); }
	(rule__AsClassifier__TermAssignment_2)
	{ after(grammarAccess.getAsClassifierAccess().getTermAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AsClassifier__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AsClassifier__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AsClassifier__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAsClassifierAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getAsClassifierAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AsDataType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AsDataType__Group__0__Impl
	rule__AsDataType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AsDataType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAsDataTypeAccess().getAsDataTypeKeyword_0()); }
	'asDataType'
	{ after(grammarAccess.getAsDataTypeAccess().getAsDataTypeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AsDataType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AsDataType__Group__1__Impl
	rule__AsDataType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AsDataType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAsDataTypeAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getAsDataTypeAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AsDataType__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AsDataType__Group__2__Impl
	rule__AsDataType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AsDataType__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAsDataTypeAccess().getTermAssignment_2()); }
	(rule__AsDataType__TermAssignment_2)
	{ after(grammarAccess.getAsDataTypeAccess().getTermAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AsDataType__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AsDataType__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AsDataType__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAsDataTypeAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getAsDataTypeAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstraintLibrary__DomainsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintLibraryAccess().getDomainsDomainParserRuleCall_0_0()); }
		ruleDomain
		{ after(grammarAccess.getConstraintLibraryAccess().getDomainsDomainParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintLibrary__ConstraintsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintLibraryAccess().getConstraintsConstraintParserRuleCall_1_0()); }
		ruleConstraint
		{ after(grammarAccess.getConstraintLibraryAccess().getConstraintsConstraintParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Domain__DomainAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDomainAccess().getDomainSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getDomainAccess().getDomainSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getConstraintAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__MessageAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintAccess().getMessageSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getConstraintAccess().getMessageSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__VariableAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintAccess().getVariableVariableParserRuleCall_5_0()); }
		ruleVariable
		{ after(grammarAccess.getConstraintAccess().getVariableVariableParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__FormulaAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintAccess().getFormulaFormulaParserRuleCall_7_0()); }
		ruleFormula
		{ after(grammarAccess.getConstraintAccess().getFormulaFormulaParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getTypeEClassifierCrossReference_0_0()); }
		(
			{ before(grammarAccess.getVariableAccess().getTypeEClassifierIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getVariableAccess().getTypeEClassifierIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getVariableAccess().getTypeEClassifierCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Iff__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIffAccess().getRightIfParserRuleCall_1_2_0()); }
		ruleIf
		{ after(grammarAccess.getIffAccess().getRightIfParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getRightXorParserRuleCall_1_2_0()); }
		ruleXor
		{ after(grammarAccess.getIfAccess().getRightXorParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXorAccess().getRightOrParserRuleCall_1_2_0()); }
		ruleOr
		{ after(grammarAccess.getXorAccess().getRightOrParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); }
		ruleAnd
		{ after(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndAccess().getRightBooleanExpressionParserRuleCall_1_2_0()); }
		ruleBooleanExpression
		{ after(grammarAccess.getAndAccess().getRightBooleanExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__NotAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotAccess().getNotFormulaParserRuleCall_3_0()); }
		ruleFormula
		{ after(grammarAccess.getNotAccess().getNotFormulaParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equals__LeftAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualsAccess().getLeftTermParserRuleCall_2_0()); }
		ruleTerm
		{ after(grammarAccess.getEqualsAccess().getLeftTermParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equals__RightAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualsAccess().getRightTermParserRuleCall_4_0()); }
		ruleTerm
		{ after(grammarAccess.getEqualsAccess().getRightTermParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Greater__LeftAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGreaterAccess().getLeftTermParserRuleCall_2_0()); }
		ruleTerm
		{ after(grammarAccess.getGreaterAccess().getLeftTermParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Greater__RightAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGreaterAccess().getRightTermParserRuleCall_4_0()); }
		ruleTerm
		{ after(grammarAccess.getGreaterAccess().getRightTermParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GreaterEqual__LeftAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGreaterEqualAccess().getLeftTermParserRuleCall_2_0()); }
		ruleTerm
		{ after(grammarAccess.getGreaterEqualAccess().getLeftTermParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GreaterEqual__RightAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGreaterEqualAccess().getRightTermParserRuleCall_4_0()); }
		ruleTerm
		{ after(grammarAccess.getGreaterEqualAccess().getRightTermParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Smaller__LeftAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSmallerAccess().getLeftTermParserRuleCall_2_0()); }
		ruleTerm
		{ after(grammarAccess.getSmallerAccess().getLeftTermParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Smaller__RightAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSmallerAccess().getRightTermParserRuleCall_4_0()); }
		ruleTerm
		{ after(grammarAccess.getSmallerAccess().getRightTermParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SmallerEqual__LeftAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSmallerEqualAccess().getLeftTermParserRuleCall_2_0()); }
		ruleTerm
		{ after(grammarAccess.getSmallerEqualAccess().getLeftTermParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SmallerEqual__RightAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSmallerEqualAccess().getRightTermParserRuleCall_4_0()); }
		ruleTerm
		{ after(grammarAccess.getSmallerEqualAccess().getRightTermParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsEmpty__TermAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIsEmptyAccess().getTermTermParserRuleCall_2_0()); }
		ruleTerm
		{ after(grammarAccess.getIsEmptyAccess().getTermTermParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsInstanceOf__TermAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIsInstanceOfAccess().getTermTermParserRuleCall_2_0()); }
		ruleTerm
		{ after(grammarAccess.getIsInstanceOfAccess().getTermTermParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsInstanceOf__TypeAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIsInstanceOfAccess().getTypeClassifierParserRuleCall_4_0()); }
		ruleClassifier
		{ after(grammarAccess.getIsInstanceOfAccess().getTypeClassifierParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsValueLiteralOf__TermAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIsValueLiteralOfAccess().getTermTermParserRuleCall_2_0()); }
		ruleTerm
		{ after(grammarAccess.getIsValueLiteralOfAccess().getTermTermParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IsValueLiteralOf__TypeAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIsValueLiteralOfAccess().getTypeDataTypeParserRuleCall_4_0()); }
		ruleDataType
		{ after(grammarAccess.getIsValueLiteralOfAccess().getTypeDataTypeParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForAllAccess().getNameVariableParserRuleCall_3_0()); }
		ruleVariable
		{ after(grammarAccess.getForAllAccess().getNameVariableParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__IterationAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForAllAccess().getIterationTermParserRuleCall_5_0()); }
		ruleTerm
		{ after(grammarAccess.getForAllAccess().getIterationTermParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__FormulaAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForAllAccess().getFormulaFormulaParserRuleCall_7_0()); }
		ruleFormula
		{ after(grammarAccess.getForAllAccess().getFormulaFormulaParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExistsAccess().getNameVariableParserRuleCall_3_0()); }
		ruleVariable
		{ after(grammarAccess.getExistsAccess().getNameVariableParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__IterationAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExistsAccess().getIterationTermParserRuleCall_5_0()); }
		ruleTerm
		{ after(grammarAccess.getExistsAccess().getIterationTermParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__FormulaAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExistsAccess().getFormulaFormulaParserRuleCall_7_0()); }
		ruleFormula
		{ after(grammarAccess.getExistsAccess().getFormulaFormulaParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableRef__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableRefAccess().getNameVariableCrossReference_1_0()); }
		(
			{ before(grammarAccess.getVariableRefAccess().getNameVariableIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getVariableRefAccess().getNameVariableIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getVariableRefAccess().getNameVariableCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableRef__GetAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableRefAccess().getGetGetParserRuleCall_2_0()); }
		ruleGet
		{ after(grammarAccess.getVariableRefAccess().getGetGetParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__TypeAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGetAccess().getTypeEClassifierCrossReference_1_0_0()); }
		(
			{ before(grammarAccess.getGetAccess().getTypeEClassifierIDTerminalRuleCall_1_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getGetAccess().getTypeEClassifierIDTerminalRuleCall_1_0_0_1()); }
		)
		{ after(grammarAccess.getGetAccess().getTypeEClassifierCrossReference_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGetAccess().getNameEStructuralFeatureCrossReference_2_0()); }
		(
			{ before(grammarAccess.getGetAccess().getNameEStructuralFeatureIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getGetAccess().getNameEStructuralFeatureIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getGetAccess().getNameEStructuralFeatureCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__NextAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGetAccess().getNextGetParserRuleCall_3_0()); }
		ruleGet
		{ after(grammarAccess.getGetAccess().getNextGetParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GetContainer__ElementAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGetContainerAccess().getElementTermParserRuleCall_2_0()); }
		ruleTerm
		{ after(grammarAccess.getGetContainerAccess().getElementTermParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GetContainments__ElementAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGetContainmentsAccess().getElementTermParserRuleCall_2_0()); }
		ruleTerm
		{ after(grammarAccess.getGetContainmentsAccess().getElementTermParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GetClosure__ElementAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGetClosureAccess().getElementTermParserRuleCall_2_0()); }
		ruleTerm
		{ after(grammarAccess.getGetClosureAccess().getElementTermParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GetClosure__FeatureAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGetClosureAccess().getFeatureFeatureConstantParserRuleCall_4_0()); }
		ruleFeatureConstant
		{ after(grammarAccess.getGetClosureAccess().getFeatureFeatureConstantParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__ElementsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSizeAccess().getElementsTermParserRuleCall_2_0()); }
		ruleTerm
		{ after(grammarAccess.getSizeAccess().getElementsTermParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexOf__ContainerAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIndexOfAccess().getContainerTermParserRuleCall_2_0()); }
		ruleTerm
		{ after(grammarAccess.getIndexOfAccess().getContainerTermParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexOf__FeatureAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIndexOfAccess().getFeatureFeatureConstantParserRuleCall_4_0()); }
		ruleFeatureConstant
		{ after(grammarAccess.getIndexOfAccess().getFeatureFeatureConstantParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexOf__ElementAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIndexOfAccess().getElementTermParserRuleCall_6_0()); }
		ruleTerm
		{ after(grammarAccess.getIndexOfAccess().getElementTermParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Concatenate__LeftAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConcatenateAccess().getLeftTermParserRuleCall_2_0()); }
		ruleTerm
		{ after(grammarAccess.getConcatenateAccess().getLeftTermParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Concatenate__RightAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConcatenateAccess().getRightTermParserRuleCall_4_0()); }
		ruleTerm
		{ after(grammarAccess.getConcatenateAccess().getRightTermParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Capitalize__StringAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCapitalizeAccess().getStringTermParserRuleCall_2_0()); }
		ruleTerm
		{ after(grammarAccess.getCapitalizeAccess().getStringTermParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectAccess().getNameVariableParserRuleCall_3_0()); }
		ruleVariable
		{ after(grammarAccess.getSelectAccess().getNameVariableParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__IterationAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectAccess().getIterationTermParserRuleCall_5_0()); }
		ruleTerm
		{ after(grammarAccess.getSelectAccess().getIterationTermParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__FormulaAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectAccess().getFormulaFormulaParserRuleCall_7_0()); }
		ruleFormula
		{ after(grammarAccess.getSelectAccess().getFormulaFormulaParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureConstant__ConstantAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureConstantAccess().getConstantEStructuralFeatureCrossReference_0()); }
		(
			{ before(grammarAccess.getFeatureConstantAccess().getConstantEStructuralFeatureIDTerminalRuleCall_0_1()); }
			RULE_ID
			{ after(grammarAccess.getFeatureConstantAccess().getConstantEStructuralFeatureIDTerminalRuleCall_0_1()); }
		)
		{ after(grammarAccess.getFeatureConstantAccess().getConstantEStructuralFeatureCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassifierConstant__ConstantAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassifierConstantAccess().getConstantEClassifierCrossReference_0()); }
		(
			{ before(grammarAccess.getClassifierConstantAccess().getConstantEClassifierIDTerminalRuleCall_0_1()); }
			RULE_ID
			{ after(grammarAccess.getClassifierConstantAccess().getConstantEClassifierIDTerminalRuleCall_0_1()); }
		)
		{ after(grammarAccess.getClassifierConstantAccess().getConstantEClassifierCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AsClassifier__TermAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAsClassifierAccess().getTermTermParserRuleCall_2_0()); }
		ruleTerm
		{ after(grammarAccess.getAsClassifierAccess().getTermTermParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeConstant__ConstantAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDataTypeConstantAccess().getConstantEDataTypeCrossReference_0()); }
		(
			{ before(grammarAccess.getDataTypeConstantAccess().getConstantEDataTypeIDTerminalRuleCall_0_1()); }
			RULE_ID
			{ after(grammarAccess.getDataTypeConstantAccess().getConstantEDataTypeIDTerminalRuleCall_0_1()); }
		)
		{ after(grammarAccess.getDataTypeConstantAccess().getConstantEDataTypeCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AsDataType__TermAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAsDataTypeAccess().getTermTermParserRuleCall_2_0()); }
		ruleTerm
		{ after(grammarAccess.getAsDataTypeAccess().getTermTermParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntConstant__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntConstantAccess().getValueSIGNED_INTTerminalRuleCall_0()); }
		RULE_SIGNED_INT
		{ after(grammarAccess.getIntConstantAccess().getValueSIGNED_INTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstant__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringConstantAccess().getValueSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getStringConstantAccess().getValueSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolConstant__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolConstantAccess().getValueBOOLEANTerminalRuleCall_0()); }
		RULE_BOOLEAN
		{ after(grammarAccess.getBoolConstantAccess().getValueBOOLEANTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_BOOLEAN : ('true'|'false');

RULE_SIGNED_INT : '-'? RULE_INT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
