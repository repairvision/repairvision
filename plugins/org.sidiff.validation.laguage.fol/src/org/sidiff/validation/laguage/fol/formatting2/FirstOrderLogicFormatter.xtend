/*
 * generated by Xtext 2.16.0
 */
package org.sidiff.validation.laguage.fol.formatting2

import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.sidiff.validation.laguage.fol.firstOrderLogic.Constraint
import org.sidiff.validation.laguage.fol.firstOrderLogic.ConstraintLibrary
import org.sidiff.validation.laguage.fol.firstOrderLogic.FirstOrderLogicPackage
import org.sidiff.validation.laguage.fol.firstOrderLogic.Get
import org.sidiff.validation.laguage.fol.firstOrderLogic.Import
import org.sidiff.validation.laguage.fol.firstOrderLogic.MetaConstant

class FirstOrderLogicFormatter extends AbstractFormatter2 {
	
	def dispatch void format(ConstraintLibrary constraintLibrary, extension IFormattableDocument document) {
		constraintLibrary.imports.forEach[format]
		constraintLibrary.constraints.forEach[format]
	}

	def dispatch void format(Import imp, extension IFormattableDocument document) {
		imp.append[newLine]
	}

	def dispatch void format(Constraint constraint, extension IFormattableDocument document) {
		constraint.prepend[newLines = 2 highPriority]
		constraint.allRegionsFor.features(
			FirstOrderLogicPackage.Literals.CONSTRAINT__NAME,
			FirstOrderLogicPackage.Literals.CONSTRAINT__MESSAGE).forEach[append[newLine]]
		constraint.variable.format
		constraint.allRegionsFor.feature(FirstOrderLogicPackage.Literals.CONSTRAINT__TYPE).surround[noSpace]
		constraint.formula.allRegionsFor.keywords('or', 'and', 'implies', 'xor', '=').forEach[surround[newLine]]
		constraint.formula.allRegionsFor.keywords('(', ')').forEach[surround[noSpace lowPriority]]
		constraint.formula.allRegionsFor.keywords(':').forEach[surround[oneSpace].append[newLine]]
		constraint.formula.allRegionsFor.keywords(',').forEach[prepend[noSpace].append[newLine]]
		constraint.formula.allRegionsFor.keywords('(').forEach[append[newLine]]
		constraint.formula.allRegionsFor.keywordPairs('(', ')').forEach[interior[indent]]
		constraint.formula.prepend[newLine].format
	}

	def dispatch void format(MetaConstant metaConstant, extension IFormattableDocument document) {
		metaConstant.allRegionsFor.keyword('::').surround[noSpace]
		metaConstant.allRegionsFor.keyword('$').append[noSpace]
	}

	def dispatch void format(Get get, extension IFormattableDocument document) {
		get.regionFor.keywords('.', '::').forEach[surround[noSpace]]
		get.next.format
	}
}
