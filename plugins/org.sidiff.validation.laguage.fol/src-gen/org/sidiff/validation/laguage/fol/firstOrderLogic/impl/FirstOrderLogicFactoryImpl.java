/**
 * generated by Xtext 2.21.0
 */
package org.sidiff.validation.laguage.fol.firstOrderLogic.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.sidiff.validation.laguage.fol.firstOrderLogic.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class FirstOrderLogicFactoryImpl extends EFactoryImpl implements FirstOrderLogicFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static FirstOrderLogicFactory init()
  {
    try
    {
      FirstOrderLogicFactory theFirstOrderLogicFactory = (FirstOrderLogicFactory)EPackage.Registry.INSTANCE.getEFactory(FirstOrderLogicPackage.eNS_URI);
      if (theFirstOrderLogicFactory != null)
      {
        return theFirstOrderLogicFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new FirstOrderLogicFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FirstOrderLogicFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case FirstOrderLogicPackage.CONSTRAINT_LIBRARY: return createConstraintLibrary();
      case FirstOrderLogicPackage.IMPORT: return createImport();
      case FirstOrderLogicPackage.CONSTRAINT: return createConstraint();
      case FirstOrderLogicPackage.VARIABLE: return createVariable();
      case FirstOrderLogicPackage.FORMULA: return createFormula();
      case FirstOrderLogicPackage.UNARY_FORMULA: return createUnaryFormula();
      case FirstOrderLogicPackage.EQUALS: return createEquals();
      case FirstOrderLogicPackage.GREATER: return createGreater();
      case FirstOrderLogicPackage.GREATER_EQUAL: return createGreaterEqual();
      case FirstOrderLogicPackage.SMALLER: return createSmaller();
      case FirstOrderLogicPackage.SMALLER_EQUAL: return createSmallerEqual();
      case FirstOrderLogicPackage.IS_EMPTY: return createIsEmpty();
      case FirstOrderLogicPackage.IS_INSTANCE_OF: return createIsInstanceOf();
      case FirstOrderLogicPackage.IS_VALUE_LITERAL_OF: return createIsValueLiteralOf();
      case FirstOrderLogicPackage.QUANTIFIER: return createQuantifier();
      case FirstOrderLogicPackage.TERM: return createTerm();
      case FirstOrderLogicPackage.REFERENCE_BASE: return createReferenceBase();
      case FirstOrderLogicPackage.VARIABLE_REF: return createVariableRef();
      case FirstOrderLogicPackage.SELECT: return createSelect();
      case FirstOrderLogicPackage.GET: return createGet();
      case FirstOrderLogicPackage.GET_CONTAINER: return createGetContainer();
      case FirstOrderLogicPackage.GET_CONTAINMENTS: return createGetContainments();
      case FirstOrderLogicPackage.GET_CLOSURE: return createGetClosure();
      case FirstOrderLogicPackage.SIZE: return createSize();
      case FirstOrderLogicPackage.INDEX_OF: return createIndexOf();
      case FirstOrderLogicPackage.CONCATENATE: return createConcatenate();
      case FirstOrderLogicPackage.CAPITALIZE: return createCapitalize();
      case FirstOrderLogicPackage.INT_CONSTANT: return createIntConstant();
      case FirstOrderLogicPackage.STRING_CONSTANT: return createStringConstant();
      case FirstOrderLogicPackage.BOOL_CONSTANT: return createBoolConstant();
      case FirstOrderLogicPackage.META_CONSTANT: return createMetaConstant();
      case FirstOrderLogicPackage.IFF: return createIff();
      case FirstOrderLogicPackage.IF: return createIf();
      case FirstOrderLogicPackage.XOR: return createXor();
      case FirstOrderLogicPackage.OR: return createOr();
      case FirstOrderLogicPackage.AND: return createAnd();
      case FirstOrderLogicPackage.NOT: return createNot();
      case FirstOrderLogicPackage.FOR_ALL: return createForAll();
      case FirstOrderLogicPackage.EXISTS: return createExists();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConstraintLibrary createConstraintLibrary()
  {
    ConstraintLibraryImpl constraintLibrary = new ConstraintLibraryImpl();
    return constraintLibrary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Constraint createConstraint()
  {
    ConstraintImpl constraint = new ConstraintImpl();
    return constraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Formula createFormula()
  {
    FormulaImpl formula = new FormulaImpl();
    return formula;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnaryFormula createUnaryFormula()
  {
    UnaryFormulaImpl unaryFormula = new UnaryFormulaImpl();
    return unaryFormula;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Equals createEquals()
  {
    EqualsImpl equals = new EqualsImpl();
    return equals;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Greater createGreater()
  {
    GreaterImpl greater = new GreaterImpl();
    return greater;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GreaterEqual createGreaterEqual()
  {
    GreaterEqualImpl greaterEqual = new GreaterEqualImpl();
    return greaterEqual;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Smaller createSmaller()
  {
    SmallerImpl smaller = new SmallerImpl();
    return smaller;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SmallerEqual createSmallerEqual()
  {
    SmallerEqualImpl smallerEqual = new SmallerEqualImpl();
    return smallerEqual;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IsEmpty createIsEmpty()
  {
    IsEmptyImpl isEmpty = new IsEmptyImpl();
    return isEmpty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IsInstanceOf createIsInstanceOf()
  {
    IsInstanceOfImpl isInstanceOf = new IsInstanceOfImpl();
    return isInstanceOf;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IsValueLiteralOf createIsValueLiteralOf()
  {
    IsValueLiteralOfImpl isValueLiteralOf = new IsValueLiteralOfImpl();
    return isValueLiteralOf;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Quantifier createQuantifier()
  {
    QuantifierImpl quantifier = new QuantifierImpl();
    return quantifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Term createTerm()
  {
    TermImpl term = new TermImpl();
    return term;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReferenceBase createReferenceBase()
  {
    ReferenceBaseImpl referenceBase = new ReferenceBaseImpl();
    return referenceBase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableRef createVariableRef()
  {
    VariableRefImpl variableRef = new VariableRefImpl();
    return variableRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Select createSelect()
  {
    SelectImpl select = new SelectImpl();
    return select;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Get createGet()
  {
    GetImpl get = new GetImpl();
    return get;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GetContainer createGetContainer()
  {
    GetContainerImpl getContainer = new GetContainerImpl();
    return getContainer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GetContainments createGetContainments()
  {
    GetContainmentsImpl getContainments = new GetContainmentsImpl();
    return getContainments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GetClosure createGetClosure()
  {
    GetClosureImpl getClosure = new GetClosureImpl();
    return getClosure;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Size createSize()
  {
    SizeImpl size = new SizeImpl();
    return size;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IndexOf createIndexOf()
  {
    IndexOfImpl indexOf = new IndexOfImpl();
    return indexOf;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Concatenate createConcatenate()
  {
    ConcatenateImpl concatenate = new ConcatenateImpl();
    return concatenate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Capitalize createCapitalize()
  {
    CapitalizeImpl capitalize = new CapitalizeImpl();
    return capitalize;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntConstant createIntConstant()
  {
    IntConstantImpl intConstant = new IntConstantImpl();
    return intConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringConstant createStringConstant()
  {
    StringConstantImpl stringConstant = new StringConstantImpl();
    return stringConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BoolConstant createBoolConstant()
  {
    BoolConstantImpl boolConstant = new BoolConstantImpl();
    return boolConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MetaConstant createMetaConstant()
  {
    MetaConstantImpl metaConstant = new MetaConstantImpl();
    return metaConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Iff createIff()
  {
    IffImpl iff = new IffImpl();
    return iff;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public If createIf()
  {
    IfImpl if_ = new IfImpl();
    return if_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Xor createXor()
  {
    XorImpl xor = new XorImpl();
    return xor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Or createOr()
  {
    OrImpl or = new OrImpl();
    return or;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public And createAnd()
  {
    AndImpl and = new AndImpl();
    return and;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Not createNot()
  {
    NotImpl not = new NotImpl();
    return not;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ForAll createForAll()
  {
    ForAllImpl forAll = new ForAllImpl();
    return forAll;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Exists createExists()
  {
    ExistsImpl exists = new ExistsImpl();
    return exists;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FirstOrderLogicPackage getFirstOrderLogicPackage()
  {
    return (FirstOrderLogicPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static FirstOrderLogicPackage getPackage()
  {
    return FirstOrderLogicPackage.eINSTANCE;
  }

} //FirstOrderLogicFactoryImpl
