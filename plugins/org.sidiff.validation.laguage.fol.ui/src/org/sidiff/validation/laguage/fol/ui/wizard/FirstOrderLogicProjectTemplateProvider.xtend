/*
 * generated by Xtext 2.17.0
 */
package org.sidiff.validation.laguage.fol.ui.wizard

import org.eclipse.core.runtime.IStatus
import org.eclipse.core.runtime.Status
import org.eclipse.jdt.core.JavaCore
import org.eclipse.xtext.ui.XtextProjectHelper
import org.eclipse.xtext.ui.wizard.template.IProjectGenerator
import org.eclipse.xtext.ui.wizard.template.IProjectTemplateProvider
import org.eclipse.xtext.ui.wizard.template.ProjectTemplate

/**
 * Create a list with all project templates to be shown in the template new project wizard.
 * 
 * Each template is able to generate one or more projects. Each project can be configured such that any number of files are included.
 */
class FirstOrderLogicProjectTemplateProvider implements IProjectTemplateProvider {
	override getProjectTemplates() {
		#[new FolProjectWizard]
	}
}

@ProjectTemplate(label="First-Order-Logic Constraint Library Project", icon="project_template.png",
	description="<p><b>First-Order-Logic Constraint Library Project</b></p>
<p>Create a new constraint library project and FOL file.</p>")
final class FolProjectWizard {
	
	val advancedGroup = group("Properties")
	val fileName = text("Name:", "ConstraintLibrary", "Name of the constraint library file to create", advancedGroup)

	override protected validate() {
		if(!fileName.value.matches('\\w+(\\.fol)?'))
			return new Status(IStatus.ERROR, "Wizard", "'" + fileName + "' is not a valid constraint library name.")
		null
	}

	override generateProjects(IProjectGenerator generator) {
		generator.generate(new FirstOrderLogicProjectFactory => [
			fileName = fileName.value
			projectName = projectInfo.projectName
			location = projectInfo.locationPath
			projectNatures += #[JavaCore.NATURE_ID, "org.eclipse.pde.PluginNature", XtextProjectHelper.NATURE_ID]
			builderIds += #[JavaCore.BUILDER_ID, XtextProjectHelper.BUILDER_ID]
			exportedPackages += #[projectInfo.projectName]
			folders += #["src", "src-gen"]
			withPluginXml = true
			requiredBundles += #["org.sidiff.validation.constraint.api", "org.eclipse.emf.ecore",
				"org.sidiff.validation.laguage.fol", "org.sidiff.validation.constraint.interpreter"]
		])
	}

	// make project info public
	override getProjectInfo() {
		super.getProjectInfo()
	}

	def getFileName() {
		return fileName.value
	}
}
